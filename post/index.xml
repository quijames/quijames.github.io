<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on James&#39;s Dev Lessons</title>
    <link>http://quijames.github.io/post/</link>
    <description>Recent content in Posts on James&#39;s Dev Lessons</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Sep 2015 16:42:57 +0200</lastBuildDate>
    <atom:link href="http://quijames.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting Up TeamCity continuous integration</title>
      <link>http://quijames.github.io/post/Setting-Up-TeamCity-Server/</link>
      <pubDate>Thu, 03 Sep 2015 16:42:57 +0200</pubDate>
      
      <guid>http://quijames.github.io/post/Setting-Up-TeamCity-Server/</guid>
      <description>

&lt;h3 id=&#34;install-teamcity-professional-on-your-server:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Install TeamCity Professional on your server&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a project&lt;/li&gt;
&lt;li&gt;I set it up on port 8080 (remember to add an endpoint in Azure)&lt;/li&gt;
&lt;li&gt;Connect it to your Git repo&lt;/li&gt;
&lt;li&gt;Set up build configurations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-msbuild:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Install MsBuild&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I opted to first install VS 2015 Express for Web&lt;/li&gt;
&lt;li&gt;This installs MsBuild&lt;/li&gt;
&lt;li&gt;For our project, you&amp;rsquo;re going to need some pretty specific .targets stuff for MsBuild. My advice: copy &lt;code&gt;C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio&lt;/code&gt; folder from an old server. If you can&amp;rsquo;t, then you&amp;rsquo;re just going to have to try run the Team City builds over and over and handle each error individually till you have all the right stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-msdeploy:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Install MsDeploy&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pretty straightforward - do this through the web platform installer&lt;/li&gt;
&lt;li&gt;Once installed, don&amp;rsquo;t forget to add it to your path &lt;code&gt;C:\Program Files (x86)\IIS\Microsoft Web Deploy V3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;set-up-websites-in-iis:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Set up websites in IIS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Set up TicketPony.Web on port 80 aimed at &lt;code&gt;c:\inetpub\ticketpony.web\www&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set up TicketPony.Auth on port 99 aimed at &lt;code&gt;c:\inetpub\ticketpony.auth\www&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once you&amp;rsquo;ve successfully built and deployed, you&amp;rsquo;ll find an &lt;code&gt;/api&lt;/code&gt; folder in the &lt;code&gt;ticketpony.web\www&lt;/code&gt; folder. Convert it into an application.&lt;/li&gt;
&lt;li&gt;Make sure your application pools are both running .NET 4, integrated&lt;/li&gt;
&lt;li&gt;Your TicketPony.Web appl. pool should be run under the admin account of the computer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;test-team-city-build-configurations:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Test Team City build configurations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The first build config may fail on npm-install.bat. I fixed this by running that file manually as Administrator and then restarting the machine.&lt;/li&gt;
&lt;li&gt;The second config may fail if you haven&amp;rsquo;t got your websites set up correctly in IIS&lt;/li&gt;
&lt;li&gt;The third config may fail if you haven&amp;rsquo;t got the correct database settings in your Database project settings (target framework and connection string)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-ghostscript:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Install GhostScript&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ghostscript.com/download/&#34;&gt;http://ghostscript.com/download/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I chose to download the Ghostscript 9.16 file for Postscript and PDF interpreter / renderer.&lt;/li&gt;
&lt;li&gt;Choose the 32 bit version.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Program Files (x86)\gs\gs9.16\bin&lt;/code&gt; folder to your system path&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-imagemagick:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Install ImageMagick&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.imagemagick.org/script/binary-releases.php&#34;&gt;http://www.imagemagick.org/script/binary-releases.php&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the Windows binary&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-visual-c-redistributable:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Install Visual C++ Redistributable&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com/en-in/download/details.aspx?id=30679&#34;&gt;http://www.microsoft.com/en-in/download/details.aspx?id=30679&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is needed by ImageMagick&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;install-msmq:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Install MSMQ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is easily done through Server Manager (Google it) ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;get-your-project-settings-right:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Get your project settings right&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make sure all release web.configs have the correct connection strings for your DB&lt;/li&gt;
&lt;li&gt;Make sure you have the correct environment variables for release&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;final-things:ec6b5e92ae410912266bc52e330cb073&#34;&gt;Final things&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make sure all endpoints are open&lt;/li&gt;
&lt;li&gt;Restart the server&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up A Blog</title>
      <link>http://quijames.github.io/post/Setting-Up-A-Blog/</link>
      <pubDate>Thu, 27 Aug 2015 12:02:24 +0200</pubDate>
      
      <guid>http://quijames.github.io/post/Setting-Up-A-Blog/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.gohugo.io/overview/quickstart/&#34;&gt;Get started with Hugo here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a Git repo in the /public folder of your compiled blog&lt;/p&gt;

&lt;p&gt;Use Git Extensions to push.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install an SSL certificate on Azure Websites</title>
      <link>http://quijames.github.io/post/Adding-SSL-on-Azure/</link>
      <pubDate>Wed, 26 Aug 2015 16:43:28 +0200</pubDate>
      
      <guid>http://quijames.github.io/post/Adding-SSL-on-Azure/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Buy a UCC SSL certificate on GoDaddy.&lt;/li&gt;
&lt;li&gt;To set it up, you&amp;rsquo;ll need to create a CSR. Do this on your local IIS. &lt;a href=&#34;https://za.godaddy.com/help/generating-a-certificate-signing-request-microsoft-iis-8-4950&#34;&gt;See this link on how to do this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Paste the CSR into GoDaddy, and enter the other domains in the Subject Alternate Names (SAN&amp;rsquo;s) field on GoDaddy&lt;/li&gt;
&lt;li&gt;Once the domains have been verified, download the certificate.&lt;/li&gt;
&lt;li&gt;Install the certificate on local IIS - follow &lt;a href=&#34;https://za.godaddy.com/help/installing-an-ssl-certificate-in-microsoft-iis-8-4951&#34;&gt;this guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Once installed, open up IIS, and open &amp;ldquo;Server Certificates&amp;rdquo;. Right clik on the certificate, and click &amp;ldquo;Export&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Export it to a .pfx file and put a password on it.&lt;/li&gt;
&lt;li&gt;Manage your website in Azure, and go to the &amp;ldquo;Configure&amp;rdquo; tab.&lt;/li&gt;
&lt;li&gt;Upload the SSL certificate, and update the bindings, and off you go!&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Building an app with AngularJS, PhoneGap and Firebase</title>
      <link>http://quijames.github.io/post/test/</link>
      <pubDate>Fri, 10 Jul 2015 16:43:28 +0200</pubDate>
      
      <guid>http://quijames.github.io/post/test/</guid>
      <description>

&lt;h1 id=&#34;part-1-setting-up-your-environment:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Part 1: Setting up your environment&lt;/h1&gt;

&lt;p&gt;Before starting anything, you need to set up Android on your machine.&lt;/p&gt;

&lt;h3 id=&#34;fixing-error-initializing-cordova-class-not-found:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Fixing [ERROR] initializing cordova class not found&lt;/h3&gt;

&lt;p&gt;This is a result of running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; cordova plugin add org.apache.cordova.device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No worries, just add the following to your /www/config.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt; &amp;lt;feature name=&amp;quot;Device&amp;quot;&amp;gt;
    &amp;lt;param name=&amp;quot;android-package&amp;quot; value=&amp;quot;org.apache.cordova.device.Device&amp;quot; /&amp;gt;
&amp;lt;/feature&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When Phonegap builds for Android now, it will add this to /platforms/android/res/xml/config.xml. Voila!&lt;/p&gt;

&lt;h3 id=&#34;handling-api-request-timeouts:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Handling API request timeouts&lt;/h3&gt;

&lt;p&gt;When logging in, our app may be connected to a wireless network but the underlying connection to the internet is not working. In this case &lt;code&gt;$http.get(url)&lt;/code&gt; will not succeed, but we&amp;rsquo;ll never know, and the logging in will appear to hang. Fixing is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    $http.get(url, {
        timeout: 20000 //time in milliseconds
    }).success(function (response) { 
        // handle success
        deferred.resolve(response);
    }).error(function (err, status) {
        deferred.reject(err);
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and from the controller that called the method to call the API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    apiService.myHttpMethod().then(
        function (success) {
            // do something successful!
        },
        function (err) {
            // show an error
            if (err)
                $scope.message = err;
            else
                $scope.message = &amp;quot;There was a problem running the $http.get. Please try again or check your internet connection&amp;quot;;    
        }
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that $http.get timeouts return a null error, so you can&amp;rsquo;t easily identify them, hence the generic error message. At least we now get timeouts though, so problem solved.&lt;/p&gt;

&lt;h3 id=&#34;fixing-portrait-screen-orientation:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Fixing portrait screen orientation&lt;/h3&gt;

&lt;p&gt;I needed to disable landscape orientation when a user turns their phone sideways. I tried the Phonegap suggestion which is to edit &lt;code&gt;www/config.xml&lt;/code&gt; but to no avail. What I ended up discovering is that you need to edit &lt;code&gt;platforms/android/AndroidManifest.xml&lt;/code&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;   &amp;lt;activity android:configChanges=&amp;quot;orientation|keyboardHidden|keyboard|screenSize|locale&amp;quot; android:screenOrientation=&amp;quot;portrait&amp;quot;&amp;gt;
   &amp;lt;/activity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then running &lt;code&gt;phonegap run android&lt;/code&gt; will force the app to open and stay in portrait mode. The &lt;code&gt;android:configChanges=&amp;quot;orientation&amp;quot;&lt;/code&gt; is important as it tells Android that orientation changes can be handled by the app and that there&amp;rsquo;s no need to close the app!&lt;/p&gt;

&lt;h3 id=&#34;getting-the-app-icon-right:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Getting the app icon right&lt;/h3&gt;

&lt;p&gt;Hours of confusion ahead if you go solo, so stay close and don&amp;rsquo;t ask questions. The &lt;code&gt;www/config.xml&lt;/code&gt; file&amp;rsquo;s definitions for icons &lt;em&gt;are ignored&lt;/em&gt; if you&amp;rsquo;re not using Adobe&amp;rsquo;s PhoneGap Build cloud service. So, if you&amp;rsquo;re simply compiling your project using the Phonegap CLI, the icons declared in that config file are ignored. The icon in &lt;code&gt;www/icon.png&lt;/code&gt; is also ignored.&lt;/p&gt;

&lt;p&gt;Basically, life as you think you know it is not.&lt;/p&gt;

&lt;p&gt;You may have read some interesting things online about this. You may have read about different sizes, and platforms, and densities. You are wrong. Read on to purge your muddied thoughts.&lt;/p&gt;

&lt;p&gt;To fix:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Put a 96x96 PNG called icon.png in the project root&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cordova build android&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check that  &lt;code&gt;platforms/android/res/drawable&lt;/code&gt; now contains your icon&lt;/li&gt;
&lt;li&gt;If not, replace the icon in &lt;code&gt;platforms/android/res/drawable&lt;/code&gt; with a 96x96 PNG called icon.png&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phonegap install android&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Hugs for Jimbo&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;fixing-livereload-injector-error-with-gulp:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Fixing LiveReload injector error with Gulp&lt;/h3&gt;

&lt;p&gt;This was a strange one. Running a gulp livereload server in the browser is great, because changes to any of our Javascript files results in Gulp re-minifying everything and reloading the app in the browser. Except that it wasn&amp;rsquo;t working. Every time I made a change, Gulp did it&amp;rsquo;s thing, reloaded the app in the browser and &amp;hellip; boom, blank page with Angular error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Uncaught Error: [$injector:modulerr] Failed to instantiate module &#39;Scanner&#39; due to: Error: [$injector:nomod] Module is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument. reload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Juicy. On a whim, I did some research into Angular best practices. Turns out, there are two ways of declaring Angular components: implicit DI (dependency injection) or explicit DI. I&amp;rsquo;m going to save you the research:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Explicit DI is the way to go&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how they look:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// implicit DI - not good
angular.module(&#39;Scanner&#39;, [
        &#39;ngRoute&#39;,
        &#39;ngTouch&#39;,
        &#39;mobile-angular-ui&#39;]
    ]) 
    .config(function ($routeProvider) {
        $routeProvider.when(&#39;/&#39;, {
            controller: &amp;quot;MainController&amp;quot;,
            templateUrl: &#39;home.html&#39;,
        });
    });

// explicit DI - good
angular.module(&#39;Scanner&#39;, [
        &#39;ngRoute&#39;,
        &#39;ngTouch&#39;,
        &#39;mobile-angular-ui&#39;]
    ]) 
    .config([&#39;$routeProvider&#39;, function ($routeProvider) { // actually with explicit DI, I could use any variable name in my function
        $routeProvider.when(&#39;/&#39;, {
            controller: &amp;quot;MainController&amp;quot;,
            templateUrl: &#39;home.html&#39;,
        });
    }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The thing is, when you use Gulp, it minifies your js files. Minification renames variables to short names, which messes up the DI unless we specify the dependencies as strings.&lt;/p&gt;

&lt;p&gt;Changing all Angular components to explicit DI has fixed the issue and turned Monday into &lt;code&gt;[&#39;Monday&#39;, function(goodDay) {}]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;keeping-the-screen-from-going-off-while-scanning:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Keeping the screen from going off while scanning&lt;/h3&gt;

&lt;p&gt;One really doesn&amp;rsquo;t want the screen lock / dim / timeout thing to kick in while scanning. Never fear, Insomnia plugin for Phonegap to the rescue!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;building-an-apk-for-play-store:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Building an APK for Play Store&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/26449512/how-to-create-singed-apk-file-using-cordova-command-line-interface&#34;&gt;Read the walkthrough here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change /src/app.js to have the new version number, DEBUG must be false&lt;/li&gt;
&lt;li&gt;Update /config.js to have minify_images=true and weinre off&lt;/li&gt;
&lt;li&gt;Remove Lawnchair.js from /src/js/external&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulp build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add Lawnchair.js into the /www/js folder&lt;/li&gt;
&lt;li&gt;Change /www/config.xml to have the correct version number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phonegap build android&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit /platforms/android/AndroidManifest.xml to have new &lt;code&gt;android:versionCode&lt;/code&gt; and &lt;code&gt;android:debuggable=&amp;quot;false&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cordova build --release android&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Put the keystore file in /platforms/android/bin and change to that directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore NAME-mobileapps.keystore Example-release-unsigned.apk xxxxxmobileapps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Staying in the /platforms/android/bin directory, run &lt;code&gt;zipalign -v 4 Example-release-unsigned.apk Example.apk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update Firebase with the version number&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;using-manatee-barcode-scanner:b128b7694e4de962e0088bcb1bcb254f&#34;&gt;Using Manatee barcode scanner&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download latest SDK&lt;/li&gt;
&lt;li&gt;In your project root, &lt;code&gt;cordova plugin add &amp;lt;folder&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit /plugins/com.manateeworks.barcodescanner/www/MWBScanner.js to have your keys and settings&lt;/li&gt;
&lt;li&gt;Build to Android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need to make changes to any of the settings AFTER building, you have to do so by either editing it directly in \platforms\android\platform_www\plugins\com.manateeworks.barcodescanner\www\MWBScanner.js or by removing the plugin, and repeating the above steps.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>